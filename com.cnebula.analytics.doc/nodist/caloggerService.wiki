=CALIS Logger Service设计要点=

#toc

=1. 数据模型=

参见datamodel.xlsx,此处暂时略。将陆续整理。


=2. 服务接口 =

==2.1 对外接口==

===2.1.1 原始接口/REST接口 ===
#地址：http://host:port/cal?k0=v0&k1=v1&....&kn=vn
#响应：空或ErrorMessage



===2.1.2 ajax接口===
//暂时略去设置上下文部分，比如设置应用系统id
calis.cal.log({k0:v0, ..., kn:vn})

=3. 设计思路(目前先只考虑单节点)=

考虑支持大并发，期望前期单台log服务器能够胜任并发5k~1w个请求，并且平均响应时间在2s以内。所以必须在内存和计算操作上做好设计。
#暂时不支持IPv6，因为IP数目过于庞大和耗费内存
#采用预加载数据字典
#采用netty nio而非servlet编写http服务
#减少内存复制和线程切换开销，具体方案为
##减少线程数目，工作线程数目不超过cpu内核数目的2倍（后期可能可根据内核数进一步减少）--减少线程切换开销
##由于线程数目较少，故可采用线程范围内预先构建map对象以供复用（无需同步，单个线程范围内天生线程安全）
##入库字段预先编排索引，入库前采用String数组{{{String[]}}}和编排的key一一对应，减少零碎map的使用
#入库操作上，采用批量入库、停用回滚，锁等等机制以加速入库
|{{{
SET LOG 0 (disabling the transaction log)
SET CACHE_SIZE (a large cache is faster)
SET LOCK_MODE 0 (disable locking)
SET UNDO_LOG 0 (disable the session undo log)
}}}|

=4. 关键流程=
以从js端调用接口为例，分为4个阶段：
#js采集补全阶段
##页面调用calis.cal.log({k0:v0, ..., kn:vn})触发
##将未提供的其他需js采集的信息补全，最后以[[2.1.1 原始接口/REST接口]]方式发送到后台
#http服务采集补全阶段
##从当前线程中取出预先构建的map，解析前端提交的信息
##将需要http服务阶段采集的信息补全
#精简入队列阶段
##从缓存总取出空闲的固定大小的数组，将补全后的map精简为数组入队列
#批量入库阶段
##如果队列满了或者时间到了，批量入库。



=5 部署运行建议=

==5.1 系统要求==

#64bit机器，cpu核数>=8，内存>=16G
#JDK 64bit，1.6u29以上
#千兆网卡 (系统测试也需注意使用千兆交换机)


==5.2 Java运行建议==
采用如下类似命令行：

|{{{
taskset -c 1-x \
java -server -Xmx大于8196m -Xms大于8196m -XX:+UseConcMarkSweepGC 此处省略其他参数
}}}|

#其中1-x，x为cpu的核数-1，这样cpu0空闲以供Linux内核调度网络IO。

==5.3 其他建议==

#停用IPv6，或者将本服务仅仅绑定在IPv4的地址上。

